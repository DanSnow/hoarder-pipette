/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StoryRenderRouteImport } from './routes/story-render'
import { Route as SearchEnginesRouteImport } from './routes/_search-engines'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutSearchEnginesRouteImport } from './routes/_layout/search-engines'
import { Route as SearchEnginesSearchEnginesApplyRouteImport } from './routes/_search-engines/search-engines.apply'
import { Route as SearchEnginesSearchEnginesIdRouteImport } from './routes/_search-engines/search-engines.$id'

const StoryRenderRoute = StoryRenderRouteImport.update({
  id: '/story-render',
  path: '/story-render',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchEnginesRoute = SearchEnginesRouteImport.update({
  id: '/_search-engines',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSearchEnginesRoute = LayoutSearchEnginesRouteImport.update({
  id: '/search-engines',
  path: '/search-engines',
  getParentRoute: () => LayoutRoute,
} as any)
const SearchEnginesSearchEnginesApplyRoute =
  SearchEnginesSearchEnginesApplyRouteImport.update({
    id: '/search-engines/apply',
    path: '/search-engines/apply',
    getParentRoute: () => SearchEnginesRoute,
  } as any)
const SearchEnginesSearchEnginesIdRoute =
  SearchEnginesSearchEnginesIdRouteImport.update({
    id: '/search-engines/$id',
    path: '/search-engines/$id',
    getParentRoute: () => SearchEnginesRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/story-render': typeof StoryRenderRoute
  '/search-engines': typeof LayoutSearchEnginesRoute
  '/': typeof LayoutIndexRoute
  '/search-engines/$id': typeof SearchEnginesSearchEnginesIdRoute
  '/search-engines/apply': typeof SearchEnginesSearchEnginesApplyRoute
}
export interface FileRoutesByTo {
  '/story-render': typeof StoryRenderRoute
  '/search-engines': typeof LayoutSearchEnginesRoute
  '/': typeof LayoutIndexRoute
  '/search-engines/$id': typeof SearchEnginesSearchEnginesIdRoute
  '/search-engines/apply': typeof SearchEnginesSearchEnginesApplyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/_search-engines': typeof SearchEnginesRouteWithChildren
  '/story-render': typeof StoryRenderRoute
  '/_layout/search-engines': typeof LayoutSearchEnginesRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_search-engines/search-engines/$id': typeof SearchEnginesSearchEnginesIdRoute
  '/_search-engines/search-engines/apply': typeof SearchEnginesSearchEnginesApplyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/story-render'
    | '/search-engines'
    | '/'
    | '/search-engines/$id'
    | '/search-engines/apply'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/story-render'
    | '/search-engines'
    | '/'
    | '/search-engines/$id'
    | '/search-engines/apply'
  id:
    | '__root__'
    | '/_layout'
    | '/_search-engines'
    | '/story-render'
    | '/_layout/search-engines'
    | '/_layout/'
    | '/_search-engines/search-engines/$id'
    | '/_search-engines/search-engines/apply'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  SearchEnginesRoute: typeof SearchEnginesRouteWithChildren
  StoryRenderRoute: typeof StoryRenderRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/story-render': {
      id: '/story-render'
      path: '/story-render'
      fullPath: '/story-render'
      preLoaderRoute: typeof StoryRenderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_search-engines': {
      id: '/_search-engines'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SearchEnginesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/search-engines': {
      id: '/_layout/search-engines'
      path: '/search-engines'
      fullPath: '/search-engines'
      preLoaderRoute: typeof LayoutSearchEnginesRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_search-engines/search-engines/apply': {
      id: '/_search-engines/search-engines/apply'
      path: '/search-engines/apply'
      fullPath: '/search-engines/apply'
      preLoaderRoute: typeof SearchEnginesSearchEnginesApplyRouteImport
      parentRoute: typeof SearchEnginesRoute
    }
    '/_search-engines/search-engines/$id': {
      id: '/_search-engines/search-engines/$id'
      path: '/search-engines/$id'
      fullPath: '/search-engines/$id'
      preLoaderRoute: typeof SearchEnginesSearchEnginesIdRouteImport
      parentRoute: typeof SearchEnginesRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutSearchEnginesRoute: typeof LayoutSearchEnginesRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutSearchEnginesRoute: LayoutSearchEnginesRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface SearchEnginesRouteChildren {
  SearchEnginesSearchEnginesIdRoute: typeof SearchEnginesSearchEnginesIdRoute
  SearchEnginesSearchEnginesApplyRoute: typeof SearchEnginesSearchEnginesApplyRoute
}

const SearchEnginesRouteChildren: SearchEnginesRouteChildren = {
  SearchEnginesSearchEnginesIdRoute: SearchEnginesSearchEnginesIdRoute,
  SearchEnginesSearchEnginesApplyRoute: SearchEnginesSearchEnginesApplyRoute,
}

const SearchEnginesRouteWithChildren = SearchEnginesRoute._addFileChildren(
  SearchEnginesRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  SearchEnginesRoute: SearchEnginesRouteWithChildren,
  StoryRenderRoute: StoryRenderRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

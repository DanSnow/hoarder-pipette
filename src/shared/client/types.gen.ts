// This file is auto-generated by @hey-api/openapi-ts

export type BookmarkId = string;

export type ListId = string;

export type TagId = string;

export type HighlightId = string;

export type AssetId = string;

export type Bookmark = {
    id: string;
    createdAt: string;
    modifiedAt: string | null;
    title?: string | null;
    archived: boolean;
    favourited: boolean;
    taggingStatus: 'success' | 'failure' | 'pending';
    summarizationStatus: 'success' | 'failure' | 'pending';
    note?: string | null;
    summary?: string | null;
    tags: Array<{
        id: string;
        name: string;
        attachedBy: 'ai' | 'human';
    }>;
    content: {
        type: 'link';
        url: string;
        title?: string | null;
        description?: string | null;
        imageUrl?: string | null;
        imageAssetId?: string | null;
        screenshotAssetId?: string | null;
        fullPageArchiveAssetId?: string | null;
        precrawledArchiveAssetId?: string | null;
        videoAssetId?: string | null;
        favicon?: string | null;
        htmlContent?: string | null;
        crawledAt?: string | null;
        author?: string | null;
        publisher?: string | null;
        datePublished?: string | null;
        dateModified?: string | null;
    } | {
        type: 'text';
        text: string;
        sourceUrl?: string | null;
    } | {
        type: 'asset';
        assetType: 'image' | 'pdf';
        assetId: string;
        fileName?: string | null;
        sourceUrl?: string | null;
        size?: number | null;
        content?: string | null;
    } | {
        type: 'unknown';
    };
    assets: Array<{
        id: string;
        assetType: 'screenshot' | 'assetScreenshot' | 'bannerImage' | 'fullPageArchive' | 'video' | 'bookmarkAsset' | 'precrawledArchive' | 'unknown';
    }>;
};

export type PaginatedBookmarks = {
    bookmarks: Array<Bookmark>;
    nextCursor: string | null;
};

export type Cursor = string;

export type Highlight = {
    bookmarkId: string;
    startOffset: number;
    endOffset: number;
    color?: 'yellow' | 'red' | 'green' | 'blue';
    text: string | null;
    note: string | null;
    id: string;
    userId: string;
    createdAt: string;
};

export type List = {
    id: string;
    name: string;
    description?: string | null;
    icon: string;
    parentId: string | null;
    type?: 'manual' | 'smart';
    query?: string | null;
    public: boolean;
};

export type Tag = {
    id: string;
    name: string;
    numBookmarks: number;
    numBookmarksByAttachedType: {
        ai?: number;
        human?: number;
    };
};

export type PaginatedHighlights = {
    highlights: Array<Highlight>;
    nextCursor: string | null;
};

export type Asset = {
    assetId: string;
    contentType: string;
    size: number;
    fileName: string;
};

export type FileToBeUploaded = unknown;

export type BookmarkId2 = BookmarkId;

export type ListId2 = ListId;

export type TagId2 = TagId;

export type HighlightId2 = HighlightId;

export type AssetId2 = AssetId;

export type GetBookmarksData = {
    body?: never;
    path?: never;
    query?: {
        archived?: boolean;
        favourited?: boolean;
        sortOrder?: 'asc' | 'desc';
        limit?: number;
        cursor?: Cursor;
        /**
         * If set to true, bookmark's content will be included in the response. Note, this content can be large for some bookmarks.
         */
        includeContent?: boolean;
    };
    url: '/bookmarks';
};

export type GetBookmarksResponses = {
    /**
     * Object with all bookmarks data.
     */
    200: PaginatedBookmarks;
};

export type GetBookmarksResponse = GetBookmarksResponses[keyof GetBookmarksResponses];

export type PostBookmarksData = {
    /**
     * The bookmark to create
     */
    body?: {
        title?: string | null;
        archived?: boolean;
        favourited?: boolean;
        note?: string;
        summary?: string;
        createdAt?: string | null;
    } & ({
        type: 'link';
        url: string;
        precrawledArchiveId?: string;
    } | {
        type: 'text';
        text: string;
        sourceUrl?: string;
    } | {
        type: 'asset';
        assetType: 'image' | 'pdf';
        assetId: string;
        fileName?: string;
        sourceUrl?: string;
    });
    path?: never;
    query?: never;
    url: '/bookmarks';
};

export type PostBookmarksErrors = {
    /**
     * Bad request
     */
    400: {
        code: string;
        message: string;
    };
};

export type PostBookmarksError = PostBookmarksErrors[keyof PostBookmarksErrors];

export type PostBookmarksResponses = {
    /**
     * The created bookmark
     */
    201: Bookmark;
};

export type PostBookmarksResponse = PostBookmarksResponses[keyof PostBookmarksResponses];

export type GetBookmarksSearchData = {
    body?: never;
    path?: never;
    query: {
        q: string;
        sortOrder?: 'asc' | 'desc' | 'relevance';
        limit?: number;
        cursor?: Cursor;
        /**
         * If set to true, bookmark's content will be included in the response. Note, this content can be large for some bookmarks.
         */
        includeContent?: boolean;
    };
    url: '/bookmarks/search';
};

export type GetBookmarksSearchResponses = {
    /**
     * Object with the search results.
     */
    200: PaginatedBookmarks;
};

export type GetBookmarksSearchResponse = GetBookmarksSearchResponses[keyof GetBookmarksSearchResponses];

export type DeleteBookmarksByBookmarkIdData = {
    body?: never;
    path: {
        bookmarkId: BookmarkId;
    };
    query?: never;
    url: '/bookmarks/{bookmarkId}';
};

export type DeleteBookmarksByBookmarkIdErrors = {
    /**
     * Bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type DeleteBookmarksByBookmarkIdError = DeleteBookmarksByBookmarkIdErrors[keyof DeleteBookmarksByBookmarkIdErrors];

export type DeleteBookmarksByBookmarkIdResponses = {
    /**
     * No content - the bookmark was deleted
     */
    204: void;
};

export type DeleteBookmarksByBookmarkIdResponse = DeleteBookmarksByBookmarkIdResponses[keyof DeleteBookmarksByBookmarkIdResponses];

export type GetBookmarksByBookmarkIdData = {
    body?: never;
    path: {
        bookmarkId: BookmarkId;
    };
    query?: {
        /**
         * If set to true, bookmark's content will be included in the response. Note, this content can be large for some bookmarks.
         */
        includeContent?: boolean;
    };
    url: '/bookmarks/{bookmarkId}';
};

export type GetBookmarksByBookmarkIdErrors = {
    /**
     * Bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type GetBookmarksByBookmarkIdError = GetBookmarksByBookmarkIdErrors[keyof GetBookmarksByBookmarkIdErrors];

export type GetBookmarksByBookmarkIdResponses = {
    /**
     * Object with bookmark data.
     */
    200: Bookmark;
};

export type GetBookmarksByBookmarkIdResponse = GetBookmarksByBookmarkIdResponses[keyof GetBookmarksByBookmarkIdResponses];

export type PatchBookmarksByBookmarkIdData = {
    /**
     * The data to update. Only the fields you want to update need to be provided.
     */
    body?: {
        archived?: boolean;
        favourited?: boolean;
        summary?: string | null;
        note?: string;
        title?: string | null;
        createdAt?: string | null;
        url?: string;
        description?: string | null;
        author?: string | null;
        publisher?: string | null;
        datePublished?: string | null;
        dateModified?: string | null;
        text?: string | null;
        assetContent?: string | null;
    };
    path: {
        bookmarkId: BookmarkId;
    };
    query?: never;
    url: '/bookmarks/{bookmarkId}';
};

export type PatchBookmarksByBookmarkIdErrors = {
    /**
     * Bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type PatchBookmarksByBookmarkIdError = PatchBookmarksByBookmarkIdErrors[keyof PatchBookmarksByBookmarkIdErrors];

export type PatchBookmarksByBookmarkIdResponses = {
    /**
     * The updated bookmark
     */
    200: {
        id: string;
        createdAt: string;
        modifiedAt: string | null;
        title?: string | null;
        archived: boolean;
        favourited: boolean;
        taggingStatus: 'success' | 'failure' | 'pending';
        summarizationStatus: 'success' | 'failure' | 'pending';
        note?: string | null;
        summary?: string | null;
    };
};

export type PatchBookmarksByBookmarkIdResponse = PatchBookmarksByBookmarkIdResponses[keyof PatchBookmarksByBookmarkIdResponses];

export type PostBookmarksByBookmarkIdSummarizeData = {
    body?: never;
    path: {
        bookmarkId: BookmarkId;
    };
    query?: never;
    url: '/bookmarks/{bookmarkId}/summarize';
};

export type PostBookmarksByBookmarkIdSummarizeErrors = {
    /**
     * Bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type PostBookmarksByBookmarkIdSummarizeError = PostBookmarksByBookmarkIdSummarizeErrors[keyof PostBookmarksByBookmarkIdSummarizeErrors];

export type PostBookmarksByBookmarkIdSummarizeResponses = {
    /**
     * The updated bookmark with summary
     */
    200: {
        id: string;
        createdAt: string;
        modifiedAt: string | null;
        title?: string | null;
        archived: boolean;
        favourited: boolean;
        taggingStatus: 'success' | 'failure' | 'pending';
        summarizationStatus: 'success' | 'failure' | 'pending';
        note?: string | null;
        summary?: string | null;
    };
};

export type PostBookmarksByBookmarkIdSummarizeResponse = PostBookmarksByBookmarkIdSummarizeResponses[keyof PostBookmarksByBookmarkIdSummarizeResponses];

export type DeleteBookmarksByBookmarkIdTagsData = {
    /**
     * The tags to detach.
     */
    body?: {
        tags: Array<{
            tagId?: string;
            tagName?: string;
        }>;
    };
    path: {
        bookmarkId: BookmarkId;
    };
    query?: never;
    url: '/bookmarks/{bookmarkId}/tags';
};

export type DeleteBookmarksByBookmarkIdTagsErrors = {
    /**
     * Bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type DeleteBookmarksByBookmarkIdTagsError = DeleteBookmarksByBookmarkIdTagsErrors[keyof DeleteBookmarksByBookmarkIdTagsErrors];

export type DeleteBookmarksByBookmarkIdTagsResponses = {
    /**
     * The list of detached tag ids
     */
    200: {
        detached: Array<TagId>;
    };
};

export type DeleteBookmarksByBookmarkIdTagsResponse = DeleteBookmarksByBookmarkIdTagsResponses[keyof DeleteBookmarksByBookmarkIdTagsResponses];

export type PostBookmarksByBookmarkIdTagsData = {
    /**
     * The tags to attach.
     */
    body?: {
        tags: Array<{
            tagId?: string;
            tagName?: string;
        }>;
    };
    path: {
        bookmarkId: BookmarkId;
    };
    query?: never;
    url: '/bookmarks/{bookmarkId}/tags';
};

export type PostBookmarksByBookmarkIdTagsErrors = {
    /**
     * Bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type PostBookmarksByBookmarkIdTagsError = PostBookmarksByBookmarkIdTagsErrors[keyof PostBookmarksByBookmarkIdTagsErrors];

export type PostBookmarksByBookmarkIdTagsResponses = {
    /**
     * The list of attached tag ids
     */
    200: {
        attached: Array<TagId>;
    };
};

export type PostBookmarksByBookmarkIdTagsResponse = PostBookmarksByBookmarkIdTagsResponses[keyof PostBookmarksByBookmarkIdTagsResponses];

export type GetBookmarksByBookmarkIdHighlightsData = {
    body?: never;
    path: {
        bookmarkId: BookmarkId;
    };
    query?: never;
    url: '/bookmarks/{bookmarkId}/highlights';
};

export type GetBookmarksByBookmarkIdHighlightsErrors = {
    /**
     * Bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type GetBookmarksByBookmarkIdHighlightsError = GetBookmarksByBookmarkIdHighlightsErrors[keyof GetBookmarksByBookmarkIdHighlightsErrors];

export type GetBookmarksByBookmarkIdHighlightsResponses = {
    /**
     * The list of highlights
     */
    200: {
        highlights: Array<Highlight>;
    };
};

export type GetBookmarksByBookmarkIdHighlightsResponse = GetBookmarksByBookmarkIdHighlightsResponses[keyof GetBookmarksByBookmarkIdHighlightsResponses];

export type PostBookmarksByBookmarkIdAssetsData = {
    /**
     * The asset to attach
     */
    body?: {
        id: string;
        assetType: 'screenshot' | 'assetScreenshot' | 'bannerImage' | 'fullPageArchive' | 'video' | 'bookmarkAsset' | 'precrawledArchive' | 'unknown';
    };
    path: {
        bookmarkId: BookmarkId;
    };
    query?: never;
    url: '/bookmarks/{bookmarkId}/assets';
};

export type PostBookmarksByBookmarkIdAssetsErrors = {
    /**
     * Bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type PostBookmarksByBookmarkIdAssetsError = PostBookmarksByBookmarkIdAssetsErrors[keyof PostBookmarksByBookmarkIdAssetsErrors];

export type PostBookmarksByBookmarkIdAssetsResponses = {
    /**
     * The attached asset
     */
    201: {
        id: string;
        assetType: 'screenshot' | 'assetScreenshot' | 'bannerImage' | 'fullPageArchive' | 'video' | 'bookmarkAsset' | 'precrawledArchive' | 'unknown';
    };
};

export type PostBookmarksByBookmarkIdAssetsResponse = PostBookmarksByBookmarkIdAssetsResponses[keyof PostBookmarksByBookmarkIdAssetsResponses];

export type DeleteBookmarksByBookmarkIdAssetsByAssetIdData = {
    body?: never;
    path: {
        bookmarkId: BookmarkId;
        assetId: AssetId;
    };
    query?: never;
    url: '/bookmarks/{bookmarkId}/assets/{assetId}';
};

export type DeleteBookmarksByBookmarkIdAssetsByAssetIdErrors = {
    /**
     * Bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type DeleteBookmarksByBookmarkIdAssetsByAssetIdError = DeleteBookmarksByBookmarkIdAssetsByAssetIdErrors[keyof DeleteBookmarksByBookmarkIdAssetsByAssetIdErrors];

export type DeleteBookmarksByBookmarkIdAssetsByAssetIdResponses = {
    /**
     * No content - asset was detached successfully
     */
    204: void;
};

export type DeleteBookmarksByBookmarkIdAssetsByAssetIdResponse = DeleteBookmarksByBookmarkIdAssetsByAssetIdResponses[keyof DeleteBookmarksByBookmarkIdAssetsByAssetIdResponses];

export type PutBookmarksByBookmarkIdAssetsByAssetIdData = {
    /**
     * The new asset to replace with
     */
    body?: {
        assetId: string;
    };
    path: {
        bookmarkId: BookmarkId;
        assetId: AssetId;
    };
    query?: never;
    url: '/bookmarks/{bookmarkId}/assets/{assetId}';
};

export type PutBookmarksByBookmarkIdAssetsByAssetIdErrors = {
    /**
     * Bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type PutBookmarksByBookmarkIdAssetsByAssetIdError = PutBookmarksByBookmarkIdAssetsByAssetIdErrors[keyof PutBookmarksByBookmarkIdAssetsByAssetIdErrors];

export type PutBookmarksByBookmarkIdAssetsByAssetIdResponses = {
    /**
     * No content - asset was replaced successfully
     */
    204: void;
};

export type PutBookmarksByBookmarkIdAssetsByAssetIdResponse = PutBookmarksByBookmarkIdAssetsByAssetIdResponses[keyof PutBookmarksByBookmarkIdAssetsByAssetIdResponses];

export type GetListsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lists';
};

export type GetListsResponses = {
    /**
     * Object with all lists data.
     */
    200: {
        lists: Array<List>;
    };
};

export type GetListsResponse = GetListsResponses[keyof GetListsResponses];

export type PostListsData = {
    /**
     * The list to create
     */
    body?: {
        name: string;
        description?: string;
        icon: string;
        type?: 'manual' | 'smart';
        query?: string;
        parentId?: string | null;
    };
    path?: never;
    query?: never;
    url: '/lists';
};

export type PostListsErrors = {
    /**
     * Bad request
     */
    400: {
        code: string;
        message: string;
    };
};

export type PostListsError = PostListsErrors[keyof PostListsErrors];

export type PostListsResponses = {
    /**
     * The created list
     */
    201: List;
};

export type PostListsResponse = PostListsResponses[keyof PostListsResponses];

export type DeleteListsByListIdData = {
    body?: never;
    path: {
        listId: ListId;
    };
    query?: never;
    url: '/lists/{listId}';
};

export type DeleteListsByListIdErrors = {
    /**
     * List not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type DeleteListsByListIdError = DeleteListsByListIdErrors[keyof DeleteListsByListIdErrors];

export type DeleteListsByListIdResponses = {
    /**
     * No content - the bookmark was deleted
     */
    204: void;
};

export type DeleteListsByListIdResponse = DeleteListsByListIdResponses[keyof DeleteListsByListIdResponses];

export type GetListsByListIdData = {
    body?: never;
    path: {
        listId: ListId;
    };
    query?: never;
    url: '/lists/{listId}';
};

export type GetListsByListIdErrors = {
    /**
     * List not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type GetListsByListIdError = GetListsByListIdErrors[keyof GetListsByListIdErrors];

export type GetListsByListIdResponses = {
    /**
     * Object with list data.
     */
    200: List;
};

export type GetListsByListIdResponse = GetListsByListIdResponses[keyof GetListsByListIdResponses];

export type PatchListsByListIdData = {
    /**
     * The data to update. Only the fields you want to update need to be provided.
     */
    body?: {
        name?: string;
        description?: string | null;
        icon?: string;
        parentId?: string | null;
        query?: string;
        public?: boolean;
    };
    path: {
        listId: ListId;
    };
    query?: never;
    url: '/lists/{listId}';
};

export type PatchListsByListIdErrors = {
    /**
     * List not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type PatchListsByListIdError = PatchListsByListIdErrors[keyof PatchListsByListIdErrors];

export type PatchListsByListIdResponses = {
    /**
     * The updated list
     */
    200: List;
};

export type PatchListsByListIdResponse = PatchListsByListIdResponses[keyof PatchListsByListIdResponses];

export type GetListsByListIdBookmarksData = {
    body?: never;
    path: {
        listId: ListId;
    };
    query?: {
        sortOrder?: 'asc' | 'desc';
        limit?: number;
        cursor?: Cursor;
        /**
         * If set to true, bookmark's content will be included in the response. Note, this content can be large for some bookmarks.
         */
        includeContent?: boolean;
    };
    url: '/lists/{listId}/bookmarks';
};

export type GetListsByListIdBookmarksErrors = {
    /**
     * List not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type GetListsByListIdBookmarksError = GetListsByListIdBookmarksErrors[keyof GetListsByListIdBookmarksErrors];

export type GetListsByListIdBookmarksResponses = {
    /**
     * Object with list data.
     */
    200: PaginatedBookmarks;
};

export type GetListsByListIdBookmarksResponse = GetListsByListIdBookmarksResponses[keyof GetListsByListIdBookmarksResponses];

export type DeleteListsByListIdBookmarksByBookmarkIdData = {
    body?: never;
    path: {
        listId: ListId;
        bookmarkId: BookmarkId;
    };
    query?: never;
    url: '/lists/{listId}/bookmarks/{bookmarkId}';
};

export type DeleteListsByListIdBookmarksByBookmarkIdErrors = {
    /**
     * Bookmark already not in list
     */
    400: {
        code: string;
        message: string;
    };
    /**
     * List or bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type DeleteListsByListIdBookmarksByBookmarkIdError = DeleteListsByListIdBookmarksByBookmarkIdErrors[keyof DeleteListsByListIdBookmarksByBookmarkIdErrors];

export type DeleteListsByListIdBookmarksByBookmarkIdResponses = {
    /**
     * No content - the bookmark was added
     */
    204: void;
};

export type DeleteListsByListIdBookmarksByBookmarkIdResponse = DeleteListsByListIdBookmarksByBookmarkIdResponses[keyof DeleteListsByListIdBookmarksByBookmarkIdResponses];

export type PutListsByListIdBookmarksByBookmarkIdData = {
    body?: never;
    path: {
        listId: ListId;
        bookmarkId: BookmarkId;
    };
    query?: never;
    url: '/lists/{listId}/bookmarks/{bookmarkId}';
};

export type PutListsByListIdBookmarksByBookmarkIdErrors = {
    /**
     * List or bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type PutListsByListIdBookmarksByBookmarkIdError = PutListsByListIdBookmarksByBookmarkIdErrors[keyof PutListsByListIdBookmarksByBookmarkIdErrors];

export type PutListsByListIdBookmarksByBookmarkIdResponses = {
    /**
     * No content - the bookmark was added
     */
    204: void;
};

export type PutListsByListIdBookmarksByBookmarkIdResponse = PutListsByListIdBookmarksByBookmarkIdResponses[keyof PutListsByListIdBookmarksByBookmarkIdResponses];

export type GetTagsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/tags';
};

export type GetTagsResponses = {
    /**
     * Object with all tags data.
     */
    200: {
        tags: Array<Tag>;
    };
};

export type GetTagsResponse = GetTagsResponses[keyof GetTagsResponses];

export type PostTagsData = {
    /**
     * The data to create the tag with.
     */
    body?: {
        name: string;
    };
    path?: never;
    query?: never;
    url: '/tags';
};

export type PostTagsResponses = {
    /**
     * The created tag
     */
    201: {
        id: string;
        name: string;
    };
};

export type PostTagsResponse = PostTagsResponses[keyof PostTagsResponses];

export type DeleteTagsByTagIdData = {
    body?: never;
    path: {
        tagId: TagId;
    };
    query?: never;
    url: '/tags/{tagId}';
};

export type DeleteTagsByTagIdErrors = {
    /**
     * Tag not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type DeleteTagsByTagIdError = DeleteTagsByTagIdErrors[keyof DeleteTagsByTagIdErrors];

export type DeleteTagsByTagIdResponses = {
    /**
     * No content - the bookmark was deleted
     */
    204: void;
};

export type DeleteTagsByTagIdResponse = DeleteTagsByTagIdResponses[keyof DeleteTagsByTagIdResponses];

export type GetTagsByTagIdData = {
    body?: never;
    path: {
        tagId: TagId;
    };
    query?: never;
    url: '/tags/{tagId}';
};

export type GetTagsByTagIdErrors = {
    /**
     * Tag not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type GetTagsByTagIdError = GetTagsByTagIdErrors[keyof GetTagsByTagIdErrors];

export type GetTagsByTagIdResponses = {
    /**
     * Object with list data.
     */
    200: Tag;
};

export type GetTagsByTagIdResponse = GetTagsByTagIdResponses[keyof GetTagsByTagIdResponses];

export type PatchTagsByTagIdData = {
    /**
     * The data to update. Only the fields you want to update need to be provided.
     */
    body?: {
        name?: string;
    };
    path: {
        tagId: TagId;
    };
    query?: never;
    url: '/tags/{tagId}';
};

export type PatchTagsByTagIdErrors = {
    /**
     * Tag not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type PatchTagsByTagIdError = PatchTagsByTagIdErrors[keyof PatchTagsByTagIdErrors];

export type PatchTagsByTagIdResponses = {
    /**
     * The updated tag
     */
    200: {
        id: string;
        name: string;
    };
};

export type PatchTagsByTagIdResponse = PatchTagsByTagIdResponses[keyof PatchTagsByTagIdResponses];

export type GetTagsByTagIdBookmarksData = {
    body?: never;
    path: {
        tagId: TagId;
    };
    query?: {
        sortOrder?: 'asc' | 'desc';
        limit?: number;
        cursor?: Cursor;
        /**
         * If set to true, bookmark's content will be included in the response. Note, this content can be large for some bookmarks.
         */
        includeContent?: boolean;
    };
    url: '/tags/{tagId}/bookmarks';
};

export type GetTagsByTagIdBookmarksErrors = {
    /**
     * Tag not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type GetTagsByTagIdBookmarksError = GetTagsByTagIdBookmarksErrors[keyof GetTagsByTagIdBookmarksErrors];

export type GetTagsByTagIdBookmarksResponses = {
    /**
     * Object with list data.
     */
    200: PaginatedBookmarks;
};

export type GetTagsByTagIdBookmarksResponse = GetTagsByTagIdBookmarksResponses[keyof GetTagsByTagIdBookmarksResponses];

export type GetHighlightsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        cursor?: Cursor;
    };
    url: '/highlights';
};

export type GetHighlightsResponses = {
    /**
     * Object with all highlights data.
     */
    200: PaginatedHighlights;
};

export type GetHighlightsResponse = GetHighlightsResponses[keyof GetHighlightsResponses];

export type PostHighlightsData = {
    /**
     * The highlight to create
     */
    body?: {
        bookmarkId: string;
        startOffset: number;
        endOffset: number;
        color?: 'yellow' | 'red' | 'green' | 'blue';
        text: string | null;
        note: string | null;
    };
    path?: never;
    query?: never;
    url: '/highlights';
};

export type PostHighlightsErrors = {
    /**
     * Bad highlight request
     */
    400: {
        code: string;
        message: string;
    };
    /**
     * Bookmark not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type PostHighlightsError = PostHighlightsErrors[keyof PostHighlightsErrors];

export type PostHighlightsResponses = {
    /**
     * The created highlight
     */
    201: Highlight;
};

export type PostHighlightsResponse = PostHighlightsResponses[keyof PostHighlightsResponses];

export type DeleteHighlightsByHighlightIdData = {
    body?: never;
    path: {
        highlightId: HighlightId;
    };
    query?: never;
    url: '/highlights/{highlightId}';
};

export type DeleteHighlightsByHighlightIdErrors = {
    /**
     * Highlight not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type DeleteHighlightsByHighlightIdError = DeleteHighlightsByHighlightIdErrors[keyof DeleteHighlightsByHighlightIdErrors];

export type DeleteHighlightsByHighlightIdResponses = {
    /**
     * The deleted highlight
     */
    200: Highlight;
};

export type DeleteHighlightsByHighlightIdResponse = DeleteHighlightsByHighlightIdResponses[keyof DeleteHighlightsByHighlightIdResponses];

export type GetHighlightsByHighlightIdData = {
    body?: never;
    path: {
        highlightId: HighlightId;
    };
    query?: never;
    url: '/highlights/{highlightId}';
};

export type GetHighlightsByHighlightIdErrors = {
    /**
     * Highlight not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type GetHighlightsByHighlightIdError = GetHighlightsByHighlightIdErrors[keyof GetHighlightsByHighlightIdErrors];

export type GetHighlightsByHighlightIdResponses = {
    /**
     * Object with highlight data.
     */
    200: Highlight;
};

export type GetHighlightsByHighlightIdResponse = GetHighlightsByHighlightIdResponses[keyof GetHighlightsByHighlightIdResponses];

export type PatchHighlightsByHighlightIdData = {
    /**
     * The data to update. Only the fields you want to update need to be provided.
     */
    body?: {
        color?: 'yellow' | 'red' | 'green' | 'blue';
    };
    path: {
        highlightId: HighlightId;
    };
    query?: never;
    url: '/highlights/{highlightId}';
};

export type PatchHighlightsByHighlightIdErrors = {
    /**
     * Highlight not found
     */
    404: {
        code: string;
        message: string;
    };
};

export type PatchHighlightsByHighlightIdError = PatchHighlightsByHighlightIdErrors[keyof PatchHighlightsByHighlightIdErrors];

export type PatchHighlightsByHighlightIdResponses = {
    /**
     * The updated highlight
     */
    200: Highlight;
};

export type PatchHighlightsByHighlightIdResponse = PatchHighlightsByHighlightIdResponses[keyof PatchHighlightsByHighlightIdResponses];

export type GetUsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type GetUsersMeResponses = {
    /**
     * Object with user data.
     */
    200: {
        id: string;
        name?: string | null;
        email?: string | null;
    };
};

export type GetUsersMeResponse = GetUsersMeResponses[keyof GetUsersMeResponses];

export type GetUsersMeStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me/stats';
};

export type GetUsersMeStatsResponses = {
    /**
     * Object with user stats.
     */
    200: {
        numBookmarks: number;
        numFavorites: number;
        numArchived: number;
        numTags: number;
        numLists: number;
        numHighlights: number;
    };
};

export type GetUsersMeStatsResponse = GetUsersMeStatsResponses[keyof GetUsersMeStatsResponses];

export type PostAssetsData = {
    /**
     * The data to create the asset with.
     */
    body?: {
        file: FileToBeUploaded;
    };
    path?: never;
    query?: never;
    url: '/assets';
};

export type PostAssetsResponses = {
    /**
     * Details about the created asset
     */
    200: Asset;
};

export type PostAssetsResponse = PostAssetsResponses[keyof PostAssetsResponses];

export type GetAssetsByAssetIdData = {
    body?: never;
    path: {
        assetId: AssetId;
    };
    query?: never;
    url: '/assets/{assetId}';
};

export type GetAssetsByAssetIdResponses = {
    /**
     * Asset content. Content type is determined by the asset type.
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://{address}/api/v1` | (string & {});
};
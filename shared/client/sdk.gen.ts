// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { GetBookmarksData, GetBookmarksResponses, PostBookmarksData, PostBookmarksResponses, PostBookmarksErrors, GetBookmarksSearchData, GetBookmarksSearchResponses, DeleteBookmarksByBookmarkIdData, DeleteBookmarksByBookmarkIdResponses, DeleteBookmarksByBookmarkIdErrors, GetBookmarksByBookmarkIdData, GetBookmarksByBookmarkIdResponses, GetBookmarksByBookmarkIdErrors, PatchBookmarksByBookmarkIdData, PatchBookmarksByBookmarkIdResponses, PatchBookmarksByBookmarkIdErrors, PostBookmarksByBookmarkIdSummarizeData, PostBookmarksByBookmarkIdSummarizeResponses, PostBookmarksByBookmarkIdSummarizeErrors, DeleteBookmarksByBookmarkIdTagsData, DeleteBookmarksByBookmarkIdTagsResponses, DeleteBookmarksByBookmarkIdTagsErrors, PostBookmarksByBookmarkIdTagsData, PostBookmarksByBookmarkIdTagsResponses, PostBookmarksByBookmarkIdTagsErrors, GetBookmarksByBookmarkIdHighlightsData, GetBookmarksByBookmarkIdHighlightsResponses, GetBookmarksByBookmarkIdHighlightsErrors, PostBookmarksByBookmarkIdAssetsData, PostBookmarksByBookmarkIdAssetsResponses, PostBookmarksByBookmarkIdAssetsErrors, DeleteBookmarksByBookmarkIdAssetsByAssetIdData, DeleteBookmarksByBookmarkIdAssetsByAssetIdResponses, DeleteBookmarksByBookmarkIdAssetsByAssetIdErrors, PutBookmarksByBookmarkIdAssetsByAssetIdData, PutBookmarksByBookmarkIdAssetsByAssetIdResponses, PutBookmarksByBookmarkIdAssetsByAssetIdErrors, GetListsData, GetListsResponses, PostListsData, PostListsResponses, PostListsErrors, DeleteListsByListIdData, DeleteListsByListIdResponses, DeleteListsByListIdErrors, GetListsByListIdData, GetListsByListIdResponses, GetListsByListIdErrors, PatchListsByListIdData, PatchListsByListIdResponses, PatchListsByListIdErrors, GetListsByListIdBookmarksData, GetListsByListIdBookmarksResponses, GetListsByListIdBookmarksErrors, DeleteListsByListIdBookmarksByBookmarkIdData, DeleteListsByListIdBookmarksByBookmarkIdResponses, DeleteListsByListIdBookmarksByBookmarkIdErrors, PutListsByListIdBookmarksByBookmarkIdData, PutListsByListIdBookmarksByBookmarkIdResponses, PutListsByListIdBookmarksByBookmarkIdErrors, GetTagsData, GetTagsResponses, PostTagsData, PostTagsResponses, DeleteTagsByTagIdData, DeleteTagsByTagIdResponses, DeleteTagsByTagIdErrors, GetTagsByTagIdData, GetTagsByTagIdResponses, GetTagsByTagIdErrors, PatchTagsByTagIdData, PatchTagsByTagIdResponses, PatchTagsByTagIdErrors, GetTagsByTagIdBookmarksData, GetTagsByTagIdBookmarksResponses, GetTagsByTagIdBookmarksErrors, GetHighlightsData, GetHighlightsResponses, PostHighlightsData, PostHighlightsResponses, PostHighlightsErrors, DeleteHighlightsByHighlightIdData, DeleteHighlightsByHighlightIdResponses, DeleteHighlightsByHighlightIdErrors, GetHighlightsByHighlightIdData, GetHighlightsByHighlightIdResponses, GetHighlightsByHighlightIdErrors, PatchHighlightsByHighlightIdData, PatchHighlightsByHighlightIdResponses, PatchHighlightsByHighlightIdErrors, GetUsersMeData, GetUsersMeResponses, GetUsersMeStatsData, GetUsersMeStatsResponses, PostAssetsData, PostAssetsResponses, GetAssetsByAssetIdData, GetAssetsByAssetIdResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all bookmarks
 * Get all bookmarks
 */
export const getBookmarks = <ThrowOnError extends boolean = false>(options?: Options<GetBookmarksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBookmarksResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks',
        ...options
    });
};

/**
 * Create a new bookmark
 * Create a new bookmark
 */
export const postBookmarks = <ThrowOnError extends boolean = false>(options?: Options<PostBookmarksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostBookmarksResponses, PostBookmarksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search bookmarks
 * Search bookmarks
 */
export const getBookmarksSearch = <ThrowOnError extends boolean = false>(options: Options<GetBookmarksSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBookmarksSearchResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks/search',
        ...options
    });
};

/**
 * Delete a bookmark
 * Delete bookmark by its id
 */
export const deleteBookmarksByBookmarkId = <ThrowOnError extends boolean = false>(options: Options<DeleteBookmarksByBookmarkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBookmarksByBookmarkIdResponses, DeleteBookmarksByBookmarkIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks/{bookmarkId}',
        ...options
    });
};

/**
 * Get a single bookmark
 * Get bookmark by its id
 */
export const getBookmarksByBookmarkId = <ThrowOnError extends boolean = false>(options: Options<GetBookmarksByBookmarkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBookmarksByBookmarkIdResponses, GetBookmarksByBookmarkIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks/{bookmarkId}',
        ...options
    });
};

/**
 * Update a bookmark
 * Update bookmark by its id
 */
export const patchBookmarksByBookmarkId = <ThrowOnError extends boolean = false>(options: Options<PatchBookmarksByBookmarkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchBookmarksByBookmarkIdResponses, PatchBookmarksByBookmarkIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks/{bookmarkId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Summarize a bookmark
 * Attaches a summary to the bookmark and returns the updated record.
 */
export const postBookmarksByBookmarkIdSummarize = <ThrowOnError extends boolean = false>(options: Options<PostBookmarksByBookmarkIdSummarizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostBookmarksByBookmarkIdSummarizeResponses, PostBookmarksByBookmarkIdSummarizeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks/{bookmarkId}/summarize',
        ...options
    });
};

/**
 * Detach tags from a bookmark
 * Detach tags from a bookmark
 */
export const deleteBookmarksByBookmarkIdTags = <ThrowOnError extends boolean = false>(options: Options<DeleteBookmarksByBookmarkIdTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBookmarksByBookmarkIdTagsResponses, DeleteBookmarksByBookmarkIdTagsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks/{bookmarkId}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Attach tags to a bookmark
 * Attach tags to a bookmark
 */
export const postBookmarksByBookmarkIdTags = <ThrowOnError extends boolean = false>(options: Options<PostBookmarksByBookmarkIdTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostBookmarksByBookmarkIdTagsResponses, PostBookmarksByBookmarkIdTagsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks/{bookmarkId}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get highlights of a bookmark
 * Get highlights of a bookmark
 */
export const getBookmarksByBookmarkIdHighlights = <ThrowOnError extends boolean = false>(options: Options<GetBookmarksByBookmarkIdHighlightsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBookmarksByBookmarkIdHighlightsResponses, GetBookmarksByBookmarkIdHighlightsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks/{bookmarkId}/highlights',
        ...options
    });
};

/**
 * Attach asset
 * Attach a new asset to a bookmark
 */
export const postBookmarksByBookmarkIdAssets = <ThrowOnError extends boolean = false>(options: Options<PostBookmarksByBookmarkIdAssetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostBookmarksByBookmarkIdAssetsResponses, PostBookmarksByBookmarkIdAssetsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks/{bookmarkId}/assets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Detach asset
 * Detach an asset from a bookmark
 */
export const deleteBookmarksByBookmarkIdAssetsByAssetId = <ThrowOnError extends boolean = false>(options: Options<DeleteBookmarksByBookmarkIdAssetsByAssetIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBookmarksByBookmarkIdAssetsByAssetIdResponses, DeleteBookmarksByBookmarkIdAssetsByAssetIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks/{bookmarkId}/assets/{assetId}',
        ...options
    });
};

/**
 * Replace asset
 * Replace an existing asset with a new one
 */
export const putBookmarksByBookmarkIdAssetsByAssetId = <ThrowOnError extends boolean = false>(options: Options<PutBookmarksByBookmarkIdAssetsByAssetIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutBookmarksByBookmarkIdAssetsByAssetIdResponses, PutBookmarksByBookmarkIdAssetsByAssetIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bookmarks/{bookmarkId}/assets/{assetId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all lists
 * Get all lists
 */
export const getLists = <ThrowOnError extends boolean = false>(options?: Options<GetListsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetListsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lists',
        ...options
    });
};

/**
 * Create a new list
 * Create a new list
 */
export const postLists = <ThrowOnError extends boolean = false>(options?: Options<PostListsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostListsResponses, PostListsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a list
 * Delete list by its id
 */
export const deleteListsByListId = <ThrowOnError extends boolean = false>(options: Options<DeleteListsByListIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteListsByListIdResponses, DeleteListsByListIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lists/{listId}',
        ...options
    });
};

/**
 * Get a single list
 * Get list by its id
 */
export const getListsByListId = <ThrowOnError extends boolean = false>(options: Options<GetListsByListIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetListsByListIdResponses, GetListsByListIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lists/{listId}',
        ...options
    });
};

/**
 * Update a list
 * Update list by its id
 */
export const patchListsByListId = <ThrowOnError extends boolean = false>(options: Options<PatchListsByListIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchListsByListIdResponses, PatchListsByListIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lists/{listId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get bookmarks in the list
 * Get bookmarks in the list
 */
export const getListsByListIdBookmarks = <ThrowOnError extends boolean = false>(options: Options<GetListsByListIdBookmarksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetListsByListIdBookmarksResponses, GetListsByListIdBookmarksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lists/{listId}/bookmarks',
        ...options
    });
};

/**
 * Remove a bookmark from a list
 * Remove the bookmarks from a list
 */
export const deleteListsByListIdBookmarksByBookmarkId = <ThrowOnError extends boolean = false>(options: Options<DeleteListsByListIdBookmarksByBookmarkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteListsByListIdBookmarksByBookmarkIdResponses, DeleteListsByListIdBookmarksByBookmarkIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lists/{listId}/bookmarks/{bookmarkId}',
        ...options
    });
};

/**
 * Add a bookmark to a list
 * Add the bookmarks to a list
 */
export const putListsByListIdBookmarksByBookmarkId = <ThrowOnError extends boolean = false>(options: Options<PutListsByListIdBookmarksByBookmarkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutListsByListIdBookmarksByBookmarkIdResponses, PutListsByListIdBookmarksByBookmarkIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lists/{listId}/bookmarks/{bookmarkId}',
        ...options
    });
};

/**
 * Get all tags
 * Get all tags
 */
export const getTags = <ThrowOnError extends boolean = false>(options?: Options<GetTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags',
        ...options
    });
};

/**
 * Create a new tag
 * Create a new tag
 */
export const postTags = <ThrowOnError extends boolean = false>(options?: Options<PostTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTagsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a tag
 * Delete tag by its id
 */
export const deleteTagsByTagId = <ThrowOnError extends boolean = false>(options: Options<DeleteTagsByTagIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagsByTagIdResponses, DeleteTagsByTagIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tagId}',
        ...options
    });
};

/**
 * Get a single tag
 * Get tag by its id
 */
export const getTagsByTagId = <ThrowOnError extends boolean = false>(options: Options<GetTagsByTagIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagsByTagIdResponses, GetTagsByTagIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tagId}',
        ...options
    });
};

/**
 * Update a tag
 * Update tag by its id
 */
export const patchTagsByTagId = <ThrowOnError extends boolean = false>(options: Options<PatchTagsByTagIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchTagsByTagIdResponses, PatchTagsByTagIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tagId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get bookmarks with the tag
 * Get bookmarks with the tag
 */
export const getTagsByTagIdBookmarks = <ThrowOnError extends boolean = false>(options: Options<GetTagsByTagIdBookmarksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagsByTagIdBookmarksResponses, GetTagsByTagIdBookmarksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tagId}/bookmarks',
        ...options
    });
};

/**
 * Get all highlights
 * Get all highlights
 */
export const getHighlights = <ThrowOnError extends boolean = false>(options?: Options<GetHighlightsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHighlightsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/highlights',
        ...options
    });
};

/**
 * Create a new highlight
 * Create a new highlight
 */
export const postHighlights = <ThrowOnError extends boolean = false>(options?: Options<PostHighlightsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostHighlightsResponses, PostHighlightsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/highlights',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a highlight
 * Delete highlight by its id
 */
export const deleteHighlightsByHighlightId = <ThrowOnError extends boolean = false>(options: Options<DeleteHighlightsByHighlightIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteHighlightsByHighlightIdResponses, DeleteHighlightsByHighlightIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/highlights/{highlightId}',
        ...options
    });
};

/**
 * Get a single highlight
 * Get highlight by its id
 */
export const getHighlightsByHighlightId = <ThrowOnError extends boolean = false>(options: Options<GetHighlightsByHighlightIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHighlightsByHighlightIdResponses, GetHighlightsByHighlightIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/highlights/{highlightId}',
        ...options
    });
};

/**
 * Update a highlight
 * Update highlight by its id
 */
export const patchHighlightsByHighlightId = <ThrowOnError extends boolean = false>(options: Options<PatchHighlightsByHighlightIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchHighlightsByHighlightIdResponses, PatchHighlightsByHighlightIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/highlights/{highlightId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get current user info
 * Returns info about the current user
 */
export const getUsersMe = <ThrowOnError extends boolean = false>(options?: Options<GetUsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersMeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Get current user stats
 * Returns stats about the current user
 */
export const getUsersMeStats = <ThrowOnError extends boolean = false>(options?: Options<GetUsersMeStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersMeStatsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/stats',
        ...options
    });
};

/**
 * Upload a new asset
 * Upload a new asset
 */
export const postAssets = <ThrowOnError extends boolean = false>(options?: Options<PostAssetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAssetsResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/assets',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get a single asset
 * Get asset by its id
 */
export const getAssetsByAssetId = <ThrowOnError extends boolean = false>(options: Options<GetAssetsByAssetIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssetsByAssetIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/assets/{assetId}',
        ...options
    });
};